At first, implementing DFS was difficult because I wasn't quite sure how to return a path... 
the PacMan could successfully navigate the maze but consistently got stuck at a dead end.
This is because I tried to add directions to a single list named 'path' which could only be
added to once a dead end was reached. 

I thought of ways to backtrack to a fork in the maze, but it was hard to implement without 
changing how the visited coordinates were tracked. I knew the program was "jumping" to 
the next node, without backtracking the steps from the deepest path. I found a way 
around this by saving each node object as a list containing a tuple of coordinates, 
and a list of directions to that node. That way, I could still "jump" to nodes when a path 
turned out to be a dead end, and add the directions to the next node so that only the path 
to the final goal was returned, rather than all the paths to each dead end in the maze. 

Implementing BFS was much easier, since all I had to do was use a Queue instead of a Stack. 